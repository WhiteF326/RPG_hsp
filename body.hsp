;#const giX 10
;#const giY 11
randomize
#const windowMulti 125
#const windowSize 480 * windowMulti / 100
#module
#defcfunc pow int x, int y
	dim ans : ans = 1
	repeat y : ans = ans * x : loop
	return ans
#global

*init
	;マップチップ読み込み
	buffer 32
	picload "Chips/MapChip.png", 32

	;メインウィンドウ読み込み
	screen 0, windowSize, windowSize, 0

	;マップ変数用意
	dim mSize : mSize = 24
	dim frq : frq = 2
	dim chipSize : chipSize = windowSize / mSize
	dim map, mSize, mSize
	sdim buf, 32000
	notesel buf : noteload "Elements/ChipPoint.txt"
	dim mapPoints, 2, notemax / 2			;todo 2で割り切れない時の対策
	repeat notemax
		sdim t, 16 : noteget t, cnt
		mapPoints(cnt \ 2, cnt / 2) = int(t)
	loop

*main
	gosub *mapGenerate
	gosub *mapPaint
	stop

*mapGenerate
	//縦と横にfrq回数仕切りを作成する
	dim rTable, mSize
	repeat mSize : rTable(cnt) = cnt : loop

	//ランダムソート
	repeat mSize
		dim r : r = rnd(mSize - cnt)
		dim tmp : tmp = rTable(r)
		rTable(r) = rTable(mSize - cnt - 1)
		rTable(mSize - cnt - 1) = tmp
	loop

	//仕切りの選択
	dim xDivPoint, frq : dim yDivPoint, frq
	repeat frq
		xDivPoint(cnt) = rTable(cnt)
		yDivPoint(cnt) = rTable(mSize - cnt - 1)
	loop

	//仕切り位置のソート
	if frq > 1{
		//sorting xDivPoint
		repeat frq - 1
			dim i : i = cnt
			repeat frq - i - 1
				if xDivPoint(cnt) > xDivPoint(cnt + 1){
					dim tmp : tmp = xDivPoint(cnt)
					xDivPoint(cnt) = xDivPoint(cnt + 1)
					xDivPoint(cnt + 1) = tmp
				}
			loop
		loop
		//sorting yDivPoint
		repeat frq - 1
			dim i : i = cnt
			repeat frq - i - 1
				if yDivPoint(cnt) > yDivPoint(cnt + 1){
					dim tmp : tmp = yDivPoint(cnt)
					yDivPoint(cnt) = yDivPoint(cnt + 1)
					yDivPoint(cnt + 1) = tmp
				}
			loop
		loop
	}

	//小部屋の生成

	//仕切りへと通路の生成

	//仕切り部で通路を繋ぐ

	//完成
	return

*mapPaint
	gsel 0
	repeat mSize
		x = cnt
		repeat mSize
			pos x * chipSize, cnt * chipSize
			gzoom chipSize, chipSize, 32, mapPoints(0, map(x, cnt)) * 16, mapPoints(1, map(x, cnt)) * 16, 16, 16
		loop
	loop
	return
